name: 'xanadOS Multi-Target Build'

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    paths:
      - 'build/**'
      - 'configs/**'
      - 'packages/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    # Build daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      targets:
        description: 'Build targets (comma-separated)'
        required: false
        default: 'x86-64-v3,x86-64-v4,compatibility'
        type: string
      test_iso:
        description: 'Test built ISOs'
        required: false
        default: true
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/build-env

jobs:
  # Job 1: Build environment preparation
  prepare:
    name: 'Prepare Build Environment'
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      build-id: ${{ steps.info.outputs.build-id }}
      should-test: ${{ steps.info.outputs.should-test }}
      should-upload: ${{ steps.info.outputs.should-upload }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Generate Build Information'
        id: info
        run: |
          # Generate unique build ID
          BUILD_ID="build-$(date +%Y%m%d)-${GITHUB_SHA:0:7}"
          echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT

          # Determine if we should test and upload
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-test=${{ github.event.inputs.test_iso }}" >> $GITHUB_OUTPUT
            echo "should-upload=${{ github.event.inputs.upload_artifacts }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "should-upload=true" >> $GITHUB_OUTPUT
          else
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "should-upload=false" >> $GITHUB_OUTPUT
          fi

          # Log build information
          echo "Build ID: $BUILD_ID"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"

      - name: 'Generate Build Matrix'
        id: matrix
        run: |
          # Default targets
          TARGETS="x86-64-v3,x86-64-v4,compatibility"

          # Override from workflow dispatch input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ -n "${{ github.event.inputs.targets }}" ]]; then
            TARGETS="${{ github.event.inputs.targets }}"
          fi

          # Convert to JSON array
          MATRIX_JSON=$(echo "$TARGETS" | jq -R 'split(",") | map(select(length > 0))')
          echo "matrix={\"target\":$MATRIX_JSON}" >> $GITHUB_OUTPUT

          echo "Build targets: $TARGETS"
          echo "Matrix JSON: $MATRIX_JSON"

  # Job 2: Build container image
  build-container:
    name: 'Build Container Image'
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Log in to Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Extract Container Metadata'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.prepare.outputs.build-id }}

      - name: 'Build and Push Container Image'
        uses: docker/build-push-action@v5
        with:
          context: ./build/containers
          file: ./build/containers/Dockerfile.build
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 3: Build ISOs for each target
  build-iso:
    name: 'Build ISO: ${{ matrix.target }}'
    runs-on: ubuntu-latest
    needs: [ prepare, build-container ]

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Log in to Container Registry'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Create Output Directory'
        run: |
          mkdir -p build-output/${{ matrix.target }}
          mkdir -p build-logs/${{ matrix.target }}

      - name: 'Build ISO Target: ${{ matrix.target }}'
        run: |
          # Set debug mode if requested
          DEBUG_FLAG=""
          if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
            DEBUG_FLAG="--debug"
          fi

          # Run build in container
          docker run --rm \
            --privileged \
            -v "$(pwd):/build/source:ro" \
            -v "$(pwd)/build-output/${{ matrix.target }}:/build/output" \
            -v "$(pwd)/build-logs/${{ matrix.target }}:/build/logs" \
            -e "BUILD_TARGET=${{ matrix.target }}" \
            -e "BUILD_ID=${{ needs.prepare.outputs.build-id }}" \
            -e "GITHUB_RUN_ID=${{ github.run_id }}" \
            -e "GITHUB_SHA=${{ github.sha }}" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.build-id }} \
            build --target ${{ matrix.target }} $DEBUG_FLAG

      - name: 'Verify Build Output'
        run: |
          echo "Build output for ${{ matrix.target }}:"
          ls -la build-output/${{ matrix.target }}/

          # Check for ISO file
          ISO_FILE=$(find build-output/${{ matrix.target }}/ -name "*.iso" | head -1)
          if [[ -z "$ISO_FILE" ]]; then
            echo "❌ No ISO file found for target ${{ matrix.target }}"
            exit 1
          fi

          echo "✅ ISO file found: $(basename "$ISO_FILE")"
          echo "📊 ISO size: $(du -h "$ISO_FILE" | cut -f1)"

      - name: 'Generate Build Artifacts'
        run: |
          cd build-output/${{ matrix.target }}

          # Create checksums
          find . -name "*.iso" -exec sha256sum {} \; > checksums.sha256
          find . -name "*.iso" -exec md5sum {} \; > checksums.md5

          # Create build information
          cat > build-info.json << EOF
          {
            "target": "${{ matrix.target }}",
            "build_id": "${{ needs.prepare.outputs.build-id }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "github_sha": "${{ github.sha }}",
            "github_ref": "${{ github.ref }}",
            "github_run_id": "${{ github.run_id }}",
            "build_system_version": "1.0.0"
          }
          EOF

          echo "Generated build artifacts:"
          ls -la

      - name: 'Upload Build Artifacts'
        if: needs.prepare.outputs.should-upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: xanados-${{ matrix.target }}-${{ needs.prepare.outputs.build-id }}
          path: |
            build-output/${{ matrix.target }}/*.iso
            build-output/${{ matrix.target }}/checksums.*
            build-output/${{ matrix.target }}/build-info.json
          retention-days: 30

      - name: 'Upload Build Logs'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.target }}-${{ needs.prepare.outputs.build-id }}
          path: build-logs/${{ matrix.target }}/
          retention-days: 7

  # Job 4: Test built ISOs
  test-iso:
    name: 'Test ISO: ${{ matrix.target }}'
    runs-on: ubuntu-latest
    needs: [ prepare, build-iso ]
    if: needs.prepare.outputs.should-test == 'true'

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Install QEMU'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86 qemu-utils

      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: xanados-${{ matrix.target }}-${{ needs.prepare.outputs.build-id }}
          path: test-artifacts/${{ matrix.target }}

      - name: 'Verify ISO Integrity'
        run: |
          cd test-artifacts/${{ matrix.target }}

          # Verify checksums
          sha256sum -c checksums.sha256
          md5sum -c checksums.md5

          echo "✅ Checksums verified"

      - name: 'Test ISO Boot'
        timeout-minutes: 10
        run: |
          cd test-artifacts/${{ matrix.target }}

          ISO_FILE=$(find . -name "*.iso" | head -1)
          if [[ -z "$ISO_FILE" ]]; then
            echo "❌ No ISO file found"
            exit 1
          fi

          echo "🚀 Testing boot for: $(basename "$ISO_FILE")"

          # Test boot with QEMU
          timeout 300 qemu-system-x86_64 \
            -m 2048 \
            -smp 2 \
            -cdrom "$ISO_FILE" \
            -boot d \
            -display none \
            -serial stdio \
            -no-reboot \
            -enable-kvm \
            || true

          echo "✅ Boot test completed"

      - name: 'Generate Test Report'
        run: |
          cd test-artifacts/${{ matrix.target }}

          cat > test-report.json << EOF
          {
            "target": "${{ matrix.target }}",
            "test_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "integrity_check": "passed",
            "boot_test": "completed",
            "build_id": "${{ needs.prepare.outputs.build-id }}"
          }
          EOF

      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.target }}-${{ needs.prepare.outputs.build-id }}
          path: test-artifacts/${{ matrix.target }}/test-report.json
          retention-days: 30

  # Job 5: Create release (on release events)
  release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: [ prepare, build-iso, test-iso ]
    if: github.event_name == 'release'

    steps:
      - name: 'Download All Artifacts'
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: 'Prepare Release Assets'
        run: |
          mkdir -p release-assets

          # Collect all ISO files and checksums
          find release-artifacts -name "*.iso" -exec cp {} release-assets/ \;
          find release-artifacts -name "checksums.*" -exec cp {} release-assets/ \;
          find release-artifacts -name "build-info.json" -exec cp {} release-assets/ \;

          # Create combined checksums
          cd release-assets
          sha256sum *.iso > xanados-${{ needs.prepare.outputs.build-id }}-checksums.sha256
          md5sum *.iso > xanados-${{ needs.prepare.outputs.build-id }}-checksums.md5

          # Create release notes
          cat > release-notes.md << 'EOF'
          # xanadOS Build ${{ needs.prepare.outputs.build-id }}

          This release contains multi-target ISO builds of xanadOS gaming distribution.

          ## Targets Included
          - **x86-64-v3**: Modern CPU optimization (2017+)
          - **x86-64-v4**: Latest CPU optimization (2020+)
          - **compatibility**: Maximum compatibility (2010+)

          ## Build Information
          - Build ID: ${{ needs.prepare.outputs.build-id }}
          - Build Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - GitHub SHA: ${{ github.sha }}
          - GitHub Ref: ${{ github.ref }}

          ## Verification
          All ISOs have been tested for integrity and boot capability.
          Verify downloads using the provided checksum files.

          EOF

          echo "Release assets prepared:"
          ls -la release-assets/

      - name: 'Upload Release Assets'
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body_path: release-assets/release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'pre') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Cleanup
  cleanup:
    name: 'Cleanup'
    runs-on: ubuntu-latest
    needs: [ prepare, build-iso, test-iso ]
    if: always()

    steps:
      - name: 'Summary'
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Build ID**: ${{ needs.prepare.outputs.build-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Targets Built**: ${{ join(fromJson(needs.prepare.outputs.matrix).target, ', ') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.prepare.outputs.should-upload }}" == "true" ]]; then
            echo "✅ Artifacts uploaded" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ Artifacts not uploaded (non-release build)" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.prepare.outputs.should-test }}" == "true" ]]; then
            echo "✅ ISOs tested" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ ISOs not tested" >> $GITHUB_STEP_SUMMARY
          fi
