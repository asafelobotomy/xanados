#!/bin/bash
# xanadOS CPU Governor Management Script
# Automatically manages CPU performance based on gaming activity

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Function to set CPU governor
set_cpu_governor() {
    local governor="$1"
    
    print_status "Setting CPU governor to: $governor"
    
    # Set governor for all available CPUs
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
        if [ -w "$cpu" ]; then
            echo "$governor" > "$cpu"
        fi
    done
    
    print_success "CPU governor set to $governor"
}

# Function to optimize CPU for gaming
optimize_for_gaming() {
    print_status "Optimizing CPU for gaming performance..."
    
    # Set performance governor
    set_cpu_governor "performance"
    
    # Disable CPU idle states for lower latency
    if [ -w /sys/devices/system/cpu/cpuidle/current_driver ]; then
        echo "none" > /sys/devices/system/cpu/cpuidle/current_driver 2>/dev/null || true
    fi
    
    # Set CPU frequency scaling
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq; do
        if [ -r "${cpu/_min_/_max_}" ] && [ -w "$cpu" ]; then
            cat "${cpu/_min_/_max_}" > "$cpu" 2>/dev/null || true
        fi
    done
    
    print_success "CPU optimized for gaming"
}

# Function to restore power-saving mode
restore_powersave() {
    print_status "Restoring power-saving CPU settings..."
    
    # Set powersave or ondemand governor
    if grep -q "ondemand" /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors 2>/dev/null; then
        set_cpu_governor "ondemand"
    else
        set_cpu_governor "powersave"
    fi
    
    # Re-enable CPU idle states
    if [ -w /sys/devices/system/cpu/cpuidle/current_driver ]; then
        echo "intel_idle" > /sys/devices/system/cpu/cpuidle/current_driver 2>/dev/null || true
    fi
    
    print_success "Power-saving mode restored"
}

# Function to show current CPU status
show_status() {
    print_status "Current CPU Status:"
    echo "Governor: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo 'Unknown')"
    echo "Current Frequency: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2>/dev/null || echo 'Unknown') kHz"
    echo "Min Frequency: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq 2>/dev/null || echo 'Unknown') kHz"
    echo "Max Frequency: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq 2>/dev/null || echo 'Unknown') kHz"
}

# Main function
main() {
    case "${1:-status}" in
        "performance"|"gaming")
            optimize_for_gaming
            ;;
        "powersave"|"power-save")
            restore_powersave
            ;;
        "status")
            show_status
            ;;
        *)
            echo "Usage: $0 {performance|gaming|powersave|power-save|status}"
            echo "  performance/gaming - Optimize for gaming performance"
            echo "  powersave/power-save - Restore power-saving mode"
            echo "  status - Show current CPU status"
            exit 1
            ;;
    esac
}

# Check if running as root
if [ "$EUID" -ne 0 ] && [ "$1" != "status" ]; then
    print_warning "This script requires root privileges for CPU governor changes"
    exec sudo "$0" "$@"
fi

main "$@"
