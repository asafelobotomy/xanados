#!/bin/bash
# xanadOS System Optimization Script
# Applies system-wide gaming optimizations on boot

set -e

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
    logger "xanados-optimize: $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    logger "xanados-optimize: SUCCESS: $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    logger "xanados-optimize: ERROR: $1"
}

# Function to apply kernel parameter optimizations
apply_kernel_optimizations() {
    print_status "Applying kernel parameter optimizations..."
    
    # Gaming-focused sysctl parameters
    cat > /tmp/xanados-sysctl.conf << 'EOF'
# xanadOS Gaming Optimizations

# Memory management
vm.swappiness = 10
vm.vfs_cache_pressure = 50
vm.dirty_ratio = 3
vm.dirty_background_ratio = 2
vm.dirty_expire_centisecs = 3000
vm.dirty_writeback_centisecs = 500

# Network optimizations
net.core.rmem_default = 262144
net.core.rmem_max = 16777216
net.core.wmem_default = 262144
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216
net.ipv4.tcp_congestion_control = bbr
net.core.default_qdisc = fq
net.ipv4.tcp_low_latency = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.core.netdev_max_backlog = 5000
net.core.netdev_budget = 600

# Gaming-specific optimizations
kernel.sched_autogroup_enabled = 0
kernel.sched_child_runs_first = 1
kernel.sched_latency_ns = 1000000
kernel.sched_min_granularity_ns = 100000
kernel.sched_wakeup_granularity_ns = 500000
kernel.sched_migration_cost_ns = 5000000

# I/O scheduler optimizations
EOF

    # Apply the optimizations
    sysctl -p /tmp/xanados-sysctl.conf >/dev/null 2>&1 || true
    rm -f /tmp/xanados-sysctl.conf
    
    print_success "Kernel optimizations applied"
}

# Function to optimize I/O schedulers
optimize_io_schedulers() {
    print_status "Optimizing I/O schedulers..."
    
    for device in /sys/block/sd* /sys/block/nvme* /sys/block/vd*; do
        if [ -d "$device" ] && [ -w "$device/queue/scheduler" ]; then
            device_name=$(basename "$device")
            
            # Check if device is rotational (HDD) or not (SSD/NVMe)
            if [ -f "$device/queue/rotational" ]; then
                is_rotational=$(cat "$device/queue/rotational")
                if [ "$is_rotational" = "1" ]; then
                    # Use BFQ for HDDs
                    echo "bfq" > "$device/queue/scheduler" 2>/dev/null || true
                    print_status "Set BFQ scheduler for HDD: $device_name"
                else
                    # Use mq-deadline for SSDs/NVMe
                    echo "mq-deadline" > "$device/queue/scheduler" 2>/dev/null || true
                    print_status "Set mq-deadline scheduler for SSD: $device_name"
                fi
            fi
            
            # Optimize queue depth and read-ahead
            if [ -w "$device/queue/nr_requests" ]; then
                echo "128" > "$device/queue/nr_requests" 2>/dev/null || true
            fi
            
            if [ -w "$device/queue/read_ahead_kb" ]; then
                echo "512" > "$device/queue/read_ahead_kb" 2>/dev/null || true
            fi
        fi
    done
    
    print_success "I/O schedulers optimized"
}

# Function to disable unnecessary services
disable_unnecessary_services() {
    print_status "Disabling unnecessary services for gaming..."
    
    # Services that can be disabled for better gaming performance
    local services_to_disable=(
        "bluetooth.service"
        "cups.service"
        "cups-browsed.service"
        "avahi-daemon.service"
        "ModemManager.service"
    )
    
    for service in "${services_to_disable[@]}"; do
        if systemctl is-enabled "$service" >/dev/null 2>&1; then
            systemctl disable "$service" >/dev/null 2>&1 || true
            print_status "Disabled $service"
        fi
    done
    
    print_success "Unnecessary services disabled"
}

# Function to enable gaming services
enable_gaming_services() {
    print_status "Enabling gaming-related services..."
    
    # Services beneficial for gaming
    local gaming_services=(
        "gamemode.service"
        "systemd-oomd.service"
    )
    
    for service in "${gaming_services[@]}"; do
        if systemctl list-unit-files | grep -q "^$service"; then
            systemctl enable "$service" >/dev/null 2>&1 || true
            print_status "Enabled $service"
        fi
    done
    
    print_success "Gaming services enabled"
}

# Function to configure CPU governor
configure_cpu_governor() {
    print_status "Configuring CPU governor for performance..."
    
    # Check if cpupower is available
    if command -v cpupower >/dev/null 2>&1; then
        cpupower frequency-set -g performance >/dev/null 2>&1 || true
        print_status "Set CPU governor to performance"
    else
        # Fallback method
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            if [ -w "$cpu" ]; then
                echo "performance" > "$cpu" 2>/dev/null || true
            fi
        done
        print_status "Set CPU governor to performance (fallback method)"
    fi
    
    print_success "CPU governor configured"
}

# Function to optimize graphics settings
optimize_graphics() {
    print_status "Applying graphics optimizations..."
    
    # Enable DRI3 for better performance
    mkdir -p /etc/X11/xorg.conf.d
    cat > /etc/X11/xorg.conf.d/20-xanados-graphics.conf << 'EOF'
Section "Device"
    Identifier "AMD Graphics"
    Driver "amdgpu"
    Option "DRI" "3"
    Option "TearFree" "true"
    Option "VariableRefresh" "true"
EndSection

Section "Device"
    Identifier "Intel Graphics"
    Driver "intel"
    Option "DRI" "3"
    Option "TearFree" "true"
EndSection

Section "Device"
    Identifier "NVIDIA Graphics"
    Driver "nvidia"
    Option "NoLogo" "true"
    Option "UseEDID" "false"
    Option "UseDisplayDevice" "none"
EndSection
EOF
    
    print_success "Graphics optimizations applied"
}

# Function to start optimizations
start_optimizations() {
    print_status "Starting xanadOS system optimizations..."
    
    apply_kernel_optimizations
    optimize_io_schedulers
    configure_cpu_governor
    optimize_graphics
    enable_gaming_services
    disable_unnecessary_services
    
    print_success "All system optimizations applied"
}

# Function to stop optimizations (restore defaults)
stop_optimizations() {
    print_status "Restoring default system settings..."
    
    # Restore CPU governor
    if command -v cpupower >/dev/null 2>&1; then
        cpupower frequency-set -g powersave >/dev/null 2>&1 || true
    else
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            if [ -w "$cpu" ]; then
                echo "powersave" > "$cpu" 2>/dev/null || true
            fi
        done
    fi
    
    # Re-enable services if needed
    # (This is optional and can be customized based on requirements)
    
    print_success "Default settings restored"
}

# Function to show current optimization status
show_status() {
    print_status "xanadOS Optimization Status:"
    echo
    
    echo "CPU Governor: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo 'Unknown')"
    echo "Swappiness: $(cat /proc/sys/vm/swappiness 2>/dev/null || echo 'Unknown')"
    echo "TCP Congestion Control: $(cat /proc/sys/net/ipv4/tcp_congestion_control 2>/dev/null || echo 'Unknown')"
    
    echo
    echo "I/O Schedulers:"
    for device in /sys/block/sd* /sys/block/nvme* /sys/block/vd*; do
        if [ -d "$device" ] && [ -f "$device/queue/scheduler" ]; then
            device_name=$(basename "$device")
            scheduler=$(cat "$device/queue/scheduler" | grep -o '\[.*\]' | tr -d '[]')
            echo "  $device_name: $scheduler"
        fi
    done
}

# Main function
main() {
    case "${1:-status}" in
        "start")
            start_optimizations
            ;;
        "stop")
            stop_optimizations
            ;;
        "status")
            show_status
            ;;
        *)
            echo "Usage: $0 {start|stop|status}"
            echo "  start  - Apply gaming optimizations"
            echo "  stop   - Restore default settings"
            echo "  status - Show current optimization status"
            exit 1
            ;;
    esac
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    print_error "This script must be run as root"
    exit 1
fi

main "$@"
