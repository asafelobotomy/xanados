#!/bin/bash
# xanadOS Gaming Detection and Optimization Script
# Automatically detects gaming sessions and applies optimizations

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="/var/log/xanados-gaming.log"
LOCK_FILE="/tmp/xanados-gaming.lock"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

print_log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | sudo tee -a "$LOG_FILE" >/dev/null
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
    print_log "INFO: $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    print_log "SUCCESS: $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    print_log "WARNING: $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    print_log "ERROR: $1"
}

# Gaming process detection patterns
GAMING_PROCESSES=(
    "steam"
    "steamwebhelper"
    "lutris"
    "wine"
    "wineserver"
    "heroic"
    "minecraft"
    "java.*minecraft"
    "retroarch"
    "dolphin-emu"
    "pcsx2"
    "rpcs3"
    "obs"
    "obs-studio"
)

# Function to check if gaming processes are running
is_gaming_active() {
    for process in "${GAMING_PROCESSES[@]}"; do
        if pgrep -f "$process" >/dev/null 2>&1; then
            return 0
        fi
    done
    return 1
}

# Function to apply gaming optimizations
apply_gaming_optimizations() {
    print_status "Applying gaming optimizations..."
    
    # CPU optimizations
    if [ -f "$SCRIPT_DIR/xanados-cpu-governor" ]; then
        sudo "$SCRIPT_DIR/xanados-cpu-governor" performance
    fi
    
    # I/O scheduler optimization
    for disk in /sys/block/sd* /sys/block/nvme*; do
        if [ -d "$disk" ] && [ -w "$disk/queue/scheduler" ]; then
            echo "mq-deadline" | sudo tee "$disk/queue/scheduler" >/dev/null 2>&1 || true
        fi
    done
    
    # Network optimizations
    if [ -w /proc/sys/net/core/netdev_max_backlog ]; then
        echo 5000 | sudo tee /proc/sys/net/core/netdev_max_backlog >/dev/null
    fi
    
    # Memory optimizations
    if [ -w /proc/sys/vm/swappiness ]; then
        echo 10 | sudo tee /proc/sys/vm/swappiness >/dev/null
    fi
    
    # Enable GameMode if available
    if command -v gamemoded >/dev/null 2>&1; then
        systemctl --user start gamemoded 2>/dev/null || true
    fi
    
    print_success "Gaming optimizations applied"
}

# Function to restore normal settings
restore_normal_settings() {
    print_status "Restoring normal system settings..."
    
    # CPU optimizations
    if [ -f "$SCRIPT_DIR/xanados-cpu-governor" ]; then
        sudo "$SCRIPT_DIR/xanados-cpu-governor" powersave
    fi
    
    # I/O scheduler restoration
    for disk in /sys/block/sd* /sys/block/nvme*; do
        if [ -d "$disk" ] && [ -w "$disk/queue/scheduler" ]; then
            # Use BFQ for rotational drives, mq-deadline for SSDs
            if [ -f "$disk/queue/rotational" ] && [ "$(cat "$disk/queue/rotational")" = "1" ]; then
                echo "bfq" | sudo tee "$disk/queue/scheduler" >/dev/null 2>&1 || true
            else
                echo "mq-deadline" | sudo tee "$disk/queue/scheduler" >/dev/null 2>&1 || true
            fi
        fi
    done
    
    # Network settings restoration
    if [ -w /proc/sys/net/core/netdev_max_backlog ]; then
        echo 1000 | sudo tee /proc/sys/net/core/netdev_max_backlog >/dev/null
    fi
    
    # Memory settings restoration
    if [ -w /proc/sys/vm/swappiness ]; then
        echo 60 | sudo tee /proc/sys/vm/swappiness >/dev/null
    fi
    
    print_success "Normal settings restored"
}

# Function to monitor gaming activity
monitor_gaming() {
    print_status "Starting gaming activity monitor..."
    
    local gaming_active=false
    local check_interval=10
    
    while true; do
        if is_gaming_active; then
            if [ "$gaming_active" = false ]; then
                print_status "Gaming activity detected!"
                apply_gaming_optimizations
                gaming_active=true
            fi
        else
            if [ "$gaming_active" = true ]; then
                print_status "Gaming activity ended"
                restore_normal_settings
                gaming_active=false
            fi
        fi
        
        sleep "$check_interval"
    done
}

# Function to show current gaming status
show_status() {
    print_status "xanadOS Gaming Optimization Status"
    echo
    
    echo "Gaming Processes Detected:"
    local found=false
    for process in "${GAMING_PROCESSES[@]}"; do
        if pgrep -f "$process" >/dev/null 2>&1; then
            echo "  âœ“ $process (PID: $(pgrep -f "$process" | head -n1))"
            found=true
        fi
    done
    
    if [ "$found" = false ]; then
        echo "  No gaming processes detected"
    fi
    
    echo
    echo "Current System State:"
    echo "  CPU Governor: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo 'Unknown')"
    echo "  VM Swappiness: $(cat /proc/sys/vm/swappiness 2>/dev/null || echo 'Unknown')"
    echo "  Network Backlog: $(cat /proc/sys/net/core/netdev_max_backlog 2>/dev/null || echo 'Unknown')"
    
    # Check GameMode status
    if systemctl --user is-active gamemoded >/dev/null 2>&1; then
        echo "  GameMode: Active"
    else
        echo "  GameMode: Inactive"
    fi
}

# Function to run one-time optimization
optimize_now() {
    print_status "Applying gaming optimizations immediately..."
    apply_gaming_optimizations
    print_success "Optimizations applied. Use 'restore' to revert changes."
}

# Function to restore settings immediately
restore_now() {
    print_status "Restoring normal settings immediately..."
    restore_normal_settings
    print_success "Settings restored to normal."
}

# Main function
main() {
    case "${1:-status}" in
        "monitor")
            monitor_gaming
            ;;
        "status")
            show_status
            ;;
        "optimize"|"gaming")
            optimize_now
            ;;
        "restore"|"normal")
            restore_now
            ;;
        "daemon")
            # Run as daemon
            if [ -f "$LOCK_FILE" ]; then
                print_error "Gaming monitor daemon is already running"
                exit 1
            fi
            
            echo $$ > "$LOCK_FILE"
            trap 'rm -f "$LOCK_FILE"; exit' INT TERM EXIT
            
            print_status "Starting gaming monitor daemon..."
            monitor_gaming
            ;;
        *)
            echo "Usage: $0 {monitor|status|optimize|restore|daemon}"
            echo "  monitor  - Monitor gaming activity and auto-optimize"
            echo "  status   - Show current gaming and optimization status"
            echo "  optimize - Apply gaming optimizations immediately"
            echo "  restore  - Restore normal settings immediately"
            echo "  daemon   - Run as background daemon"
            exit 1
            ;;
    esac
}

# Create log file if it doesn't exist
sudo touch "$LOG_FILE" 2>/dev/null || true
sudo chmod 664 "$LOG_FILE" 2>/dev/null || true

main "$@"
