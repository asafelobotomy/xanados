#!/bin/bash
# Documentation Generation and Validation System
# Automated documentation management for xanadOS

set -euo pipefail

# Change to script directory and source libraries
cd "$(dirname "$0")" || exit 1
source "../lib/common.sh"
source "../lib/validation.sh"
source "../lib/reports.sh"

# Configuration
DOC_SYSTEM_VERSION="2.0"
DOCS_ROOT="$(get_project_root)/docs"
DEV_DOCS="$DOCS_ROOT/development"
USER_DOCS="$DOCS_ROOT/user"
REPORTS_DIR="$DOCS_ROOT/reports"
VALIDATION_LOG="$REPORTS_DIR/doc-validation-$(date +%Y%m%d-%H%M%S).log"

# Ensure directories exist
ensure_directory "$REPORTS_DIR"

# Initialize logging
exec 1> >(tee -a "$VALIDATION_LOG")
exec 2> >(tee -a "$VALIDATION_LOG" >&2)

print_header "📚 Documentation System Enhancement"
echo ""

# Documentation validation functions
validate_markdown_syntax() {
    local file="$1"
    local errors=0

    # Check for common markdown issues
    if grep -q "^#[^ ]" "$file"; then
        print_warning "Missing space after hash in: $file"
        ((errors++))
    fi

    if grep -q "^\* [^ ]" "$file"; then
        print_warning "Inconsistent list formatting in: $file"
        ((errors++))
    fi

    # Check for broken internal links
    while IFS= read -r line; do
        if echo "$line" | grep -E '\[.*\]\([^)]+\)' >/dev/null; then
            local link
            link=$(echo "$line" | sed -n 's/.*\[\([^]]*\)\](\([^)]*\)).*/\2/p')
            if [[ "$link" == *.md ]] && [[ ! "$link" == http* ]]; then
                local target_file
                if [[ "$link" == /* ]]; then
                    target_file="$DOCS_ROOT$link"
                else
                    target_file="$(dirname "$file")/$link"
                fi

                if [[ ! -f "$target_file" ]]; then
                    print_warning "Broken link in $file: $link"
                    ((errors++))
                fi
            fi
        fi
    done < "$file"

    return $errors
}

generate_doc_index() {
    local doc_dir="$1"
    local index_file="$doc_dir/README.md"
    local title="$2"

    print_info "Generating index for: $title"

    cat > "$index_file" << EOF
# $title

**Last Updated:** $(date '+%Y-%m-%d %H:%M:%S')
**Documentation System:** v$DOC_SYSTEM_VERSION

## 📁 Directory Structure

\`\`\`
$(basename "$doc_dir")/
EOF

    # Generate directory structure
    find "$doc_dir" -type d | sort | while read -r dir; do
        local relative_dir="${dir#$doc_dir/}"
        if [[ -n "$relative_dir" ]]; then
            local depth=$(echo "$relative_dir" | tr -cd '/' | wc -c)
            local indent=$(printf "│   %.0s" $(seq 1 $depth))
            echo "$indent├── $(basename "$dir")/" >> "$index_file"
        fi
    done

    echo "\`\`\`" >> "$index_file"
    echo "" >> "$index_file"

    # Generate file listings by category
    if [[ "$doc_dir" == "$DEV_DOCS" ]]; then
        generate_dev_doc_sections "$index_file"
    elif [[ "$doc_dir" == "$USER_DOCS" ]]; then
        generate_user_doc_sections "$index_file"
    fi

    cat >> "$index_file" << EOF

## 📊 Documentation Statistics

- **Total Files:** $(find "$doc_dir" -name "*.md" | wc -l)
- **Last Updated:** $(date '+%Y-%m-%d')
- **Documentation Version:** v$DOC_SYSTEM_VERSION

---

*This index is automatically generated by the xanadOS Documentation System.*
EOF

    print_success "Generated index: $index_file"
}

generate_dev_doc_sections() {
    local index_file="$1"

    cat >> "$index_file" << EOF
## 🏗️ Architecture

Core system design and technical architecture documentation.

EOF

    if [[ -d "$DEV_DOCS/architecture" ]]; then
        find "$DEV_DOCS/architecture" -name "*.md" -not -name "README.md" | sort | while read -r file; do
            local filename=$(basename "$file" .md)
            local title=$(head -n1 "$file" | sed 's/^# //')
            echo "- **[$title](architecture/$filename.md)**" >> "$index_file"
        done
    fi

    cat >> "$index_file" << EOF

## 📋 Planning

Strategic planning documents and project roadmaps.

EOF

    if [[ -d "$DEV_DOCS/planning" ]]; then
        find "$DEV_DOCS/planning" -name "*.md" -not -name "README.md" | sort | while read -r file; do
            local filename=$(basename "$file" .md)
            local title=$(head -n1 "$file" | sed 's/^# //')
            echo "- **[$title](planning/$filename.md)**" >> "$index_file"
        done
    fi

    cat >> "$index_file" << EOF

## 📊 Reports

Development progress reports organized by phases and priorities.

EOF

    if [[ -d "$DEV_DOCS/reports" ]]; then
        find "$DEV_DOCS/reports" -name "*.md" | sort | while read -r file; do
            local filename=$(basename "$file" .md)
            local title=$(head -n1 "$file" | sed 's/^# //')
            echo "- **[$title](reports/$filename.md)**" >> "$index_file"
        done
    fi
}

generate_user_doc_sections() {
    local index_file="$1"

    cat >> "$index_file" << EOF
## 🎮 Gaming Guides

Comprehensive gaming setup and optimization guides.

EOF

    find "$USER_DOCS" -name "*gaming*" -name "*.md" | sort | while read -r file; do
        local filename=$(basename "$file" .md)
        local title=$(head -n1 "$file" | sed 's/^# //')
        local relative_path="${file#$USER_DOCS/}"
        echo "- **[$title]($relative_path)**" >> "$index_file"
    done

    cat >> "$index_file" << EOF

## 📚 Installation & Setup

Installation guides and system setup documentation.

EOF

    find "$USER_DOCS" -name "*install*" -o -name "*setup*" -name "*.md" | sort | while read -r file; do
        local filename=$(basename "$file" .md)
        local title=$(head -n1 "$file" | sed 's/^# //')
        local relative_path="${file#$USER_DOCS/}"
        echo "- **[$title]($relative_path)**" >> "$index_file"
    done
}

validate_documentation() {
    print_section "Documentation Validation"

    local total_files=0
    local valid_files=0
    local error_count=0

    # Validate all markdown files
    while IFS= read -r -d '' file; do
        ((total_files++))
        print_info "Validating: ${file#$DOCS_ROOT/}"

        if validate_markdown_syntax "$file"; then
            ((valid_files++))
        else
            ((error_count++))
        fi
    done < <(find "$DOCS_ROOT" -name "*.md" -print0)

    # Validation summary
    local pass_rate=0
    if [[ $total_files -gt 0 ]]; then
        pass_rate=$((valid_files * 100 / total_files))
    fi

    echo ""
    print_section "Validation Results"
    echo "📊 Documentation Validation Summary:"
    echo "   Total Files: $total_files"
    echo "   Valid Files: $valid_files"
    echo "   Files with Issues: $error_count"
    echo "   Validation Rate: ${pass_rate}%"
    echo ""

    if [[ $error_count -eq 0 ]]; then
        print_success "✅ All documentation validated successfully!"
        return 0
    else
        print_warning "⚠️ Documentation has $error_count file(s) with issues"
        return 1
    fi
}

generate_documentation_report() {
    print_section "Documentation Report Generation"

    local report_file="$REPORTS_DIR/documentation-report-$(date +%Y%m%d-%H%M%S).md"

    print_info "Generating comprehensive documentation report..."

    cat > "$report_file" << EOF
# xanadOS Documentation System Report

**Generated:** $(date '+%Y-%m-%d %H:%M:%S')
**System Version:** v$DOC_SYSTEM_VERSION
**Report Type:** Comprehensive Analysis

## 📊 Documentation Statistics

### File Distribution

| Category | Files | Description |
|----------|-------|-------------|
| Development | $(find "$DEV_DOCS" -name "*.md" | wc -l) | Technical documentation and reports |
| User Guides | $(find "$USER_DOCS" -name "*.md" | wc -l) | End-user documentation |
| Reports | $(find "$REPORTS_DIR" -name "*.md" | wc -l) | Generated reports and analysis |
| **Total** | **$(find "$DOCS_ROOT" -name "*.md" | wc -l)** | **All documentation files** |

### Quality Metrics

- **Validation Status:** $(if validate_documentation &>/dev/null; then echo "✅ PASS"; else echo "⚠️ ISSUES"; fi)
- **Index Files:** $(find "$DOCS_ROOT" -name "README.md" | wc -l) generated automatically
- **Cross-References:** Validated for broken links
- **Format Compliance:** GitHub-flavored Markdown

## 📁 Directory Structure Analysis

### Development Documentation
\`\`\`
EOF

    # Generate detailed structure
    find "$DEV_DOCS" -type f -name "*.md" | sort | while read -r file; do
        local relative_path="${file#$DEV_DOCS/}"
        echo "$relative_path" >> "$report_file"
    done

    cat >> "$report_file" << EOF
\`\`\`

### User Documentation
\`\`\`
EOF

    find "$USER_DOCS" -type f -name "*.md" | sort | while read -r file; do
        local relative_path="${file#$USER_DOCS/}"
        echo "$relative_path" >> "$report_file"
    done

    cat >> "$report_file" << EOF
\`\`\`

## 🔗 Cross-Reference Analysis

### Internal Links
$(grep -r "\[.*\](.*\.md)" "$DOCS_ROOT" | wc -l) internal markdown links found

### External Links
$(grep -r "\[.*\](http" "$DOCS_ROOT" | wc -l) external links found

## 📈 Recommendations

### Strengths
- Comprehensive coverage of all project components
- Well-organized hierarchical structure
- Automated index generation
- Multi-format report generation

### Improvement Opportunities
- Consider adding more visual diagrams
- Expand troubleshooting sections
- Add more code examples
- Create video tutorials for complex procedures

---

*This report was generated by the xanadOS Documentation System v$DOC_SYSTEM_VERSION*
EOF

    print_success "Documentation report generated: $report_file"
}

auto_fix_documentation() {
    print_section "Documentation Auto-Fix"

    local fixed_count=0

    while IFS= read -r -d '' file; do
        print_info "Auto-fixing: ${file#$DOCS_ROOT/}"

        # Fix common markdown issues
        local temp_file=$(mktemp)

        # Fix heading spacing
        sed 's/^#\([^ ]\)/# \1/' "$file" > "$temp_file"

        # Fix list spacing
        sed 's/^\*\([^ ]\)/* \1/' "$temp_file" > "${temp_file}.2"
        mv "${temp_file}.2" "$temp_file"

        # Apply fixes if changes were made
        if ! cmp -s "$file" "$temp_file"; then
            cp "$temp_file" "$file"
            ((fixed_count++))
            print_success "Fixed: $file"
        fi

        rm -f "$temp_file"
    done < <(find "$DOCS_ROOT" -name "*.md" -print0)

    print_info "Auto-fix completed: $fixed_count files modified"
}

# Main execution
case "${1:-help}" in
    "validate")
        validate_documentation
        ;;
    "generate-indexes")
        generate_doc_index "$DEV_DOCS" "Development Documentation"
        generate_doc_index "$USER_DOCS" "User Documentation"
        ;;
    "generate-report")
        generate_documentation_report
        ;;
    "auto-fix")
        auto_fix_documentation
        ;;
    "full")
        print_info "Running full documentation system enhancement..."
        auto_fix_documentation
        generate_doc_index "$DEV_DOCS" "Development Documentation"
        generate_doc_index "$USER_DOCS" "User Documentation"
        validate_documentation
        generate_documentation_report
        ;;
    "help"|*)
        echo "Usage: $0 [validate|generate-indexes|generate-report|auto-fix|full|help]"
        echo ""
        echo "Commands:"
        echo "  validate         Validate all markdown documentation"
        echo "  generate-indexes Create/update README.md index files"
        echo "  generate-report  Generate comprehensive documentation report"
        echo "  auto-fix         Automatically fix common markdown issues"
        echo "  full             Run all documentation enhancement tasks"
        echo "  help             Show this help message"
        exit 0
        ;;
esac
